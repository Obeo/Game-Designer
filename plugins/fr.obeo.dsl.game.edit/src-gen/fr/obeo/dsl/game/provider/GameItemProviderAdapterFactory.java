/**
 */
package fr.obeo.dsl.game.provider;

import fr.obeo.dsl.game.util.GameAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GameItemProviderAdapterFactory extends GameAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GameItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Game} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GameItemProvider gameItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Game}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGameAdapter() {
		if (gameItemProvider == null) {
			gameItemProvider = new GameItemProvider(this);
		}

		return gameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.TMX} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TMXItemProvider tmxItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.TMX}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTMXAdapter() {
		if (tmxItemProvider == null) {
			tmxItemProvider = new TMXItemProvider(this);
		}

		return tmxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Sheet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SheetItemProvider sheetItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Sheet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSheetAdapter() {
		if (sheetItemProvider == null) {
			sheetItemProvider = new SheetItemProvider(this);
		}

		return sheetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Animation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnimationItemProvider animationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Animation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnimationAdapter() {
		if (animationItemProvider == null) {
			animationItemProvider = new AnimationItemProvider(this);
		}

		return animationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Collision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollisionItemProvider collisionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Collision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollisionAdapter() {
		if (collisionItemProvider == null) {
			collisionItemProvider = new CollisionItemProvider(this);
		}

		return collisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.KeyEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyEventItemProvider keyEventItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.KeyEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyEventAdapter() {
		if (keyEventItemProvider == null) {
			keyEventItemProvider = new KeyEventItemProvider(this);
		}

		return keyEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.ArrowKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrowKeyItemProvider arrowKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.ArrowKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrowKeyAdapter() {
		if (arrowKeyItemProvider == null) {
			arrowKeyItemProvider = new ArrowKeyItemProvider(this);
		}

		return arrowKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.FireKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FireKeyItemProvider fireKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.FireKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFireKeyAdapter() {
		if (fireKeyItemProvider == null) {
			fireKeyItemProvider = new FireKeyItemProvider(this);
		}

		return fireKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.ActionKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionKeyItemProvider actionKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.ActionKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionKeyAdapter() {
		if (actionKeyItemProvider == null) {
			actionKeyItemProvider = new ActionKeyItemProvider(this);
		}

		return actionKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.ConfirmKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfirmKeyItemProvider confirmKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.ConfirmKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfirmKeyAdapter() {
		if (confirmKeyItemProvider == null) {
			confirmKeyItemProvider = new ConfirmKeyItemProvider(this);
		}

		return confirmKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.EscapeKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EscapeKeyItemProvider escapeKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.EscapeKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEscapeKeyAdapter() {
		if (escapeKeyItemProvider == null) {
			escapeKeyItemProvider = new EscapeKeyItemProvider(this);
		}

		return escapeKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.PauseKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PauseKeyItemProvider pauseKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.PauseKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPauseKeyAdapter() {
		if (pauseKeyItemProvider == null) {
			pauseKeyItemProvider = new PauseKeyItemProvider(this);
		}

		return pauseKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.SaveKey} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaveKeyItemProvider saveKeyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.SaveKey}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaveKeyAdapter() {
		if (saveKeyItemProvider == null) {
			saveKeyItemProvider = new SaveKeyItemProvider(this);
		}

		return saveKeyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Jump} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpItemProvider jumpItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Jump}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpAdapter() {
		if (jumpItemProvider == null) {
			jumpItemProvider = new JumpItemProvider(this);
		}

		return jumpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Jumped} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JumpedItemProvider jumpedItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Jumped}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJumpedAdapter() {
		if (jumpedItemProvider == null) {
			jumpedItemProvider = new JumpedItemProvider(this);
		}

		return jumpedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveEventItemProvider moveEventItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveEventAdapter() {
		if (moveEventItemProvider == null) {
			moveEventItemProvider = new MoveEventItemProvider(this);
		}

		return moveEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveDown} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveDownItemProvider moveDownItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveDown}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveDownAdapter() {
		if (moveDownItemProvider == null) {
			moveDownItemProvider = new MoveDownItemProvider(this);
		}

		return moveDownItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveUp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveUpItemProvider moveUpItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveUp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveUpAdapter() {
		if (moveUpItemProvider == null) {
			moveUpItemProvider = new MoveUpItemProvider(this);
		}

		return moveUpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveStopVerticaly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveStopVerticalyItemProvider moveStopVerticalyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveStopVerticaly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveStopVerticalyAdapter() {
		if (moveStopVerticalyItemProvider == null) {
			moveStopVerticalyItemProvider = new MoveStopVerticalyItemProvider(this);
		}

		return moveStopVerticalyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveLeft} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveLeftItemProvider moveLeftItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveLeft}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveLeftAdapter() {
		if (moveLeftItemProvider == null) {
			moveLeftItemProvider = new MoveLeftItemProvider(this);
		}

		return moveLeftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveRight} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveRightItemProvider moveRightItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveRight}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveRightAdapter() {
		if (moveRightItemProvider == null) {
			moveRightItemProvider = new MoveRightItemProvider(this);
		}

		return moveRightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.MoveStopHorizontaly} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoveStopHorizontalyItemProvider moveStopHorizontalyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.MoveStopHorizontaly}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoveStopHorizontalyAdapter() {
		if (moveStopHorizontalyItemProvider == null) {
			moveStopHorizontalyItemProvider = new MoveStopHorizontalyItemProvider(this);
		}

		return moveStopHorizontalyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Sprite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpriteItemProvider spriteItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Sprite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpriteAdapter() {
		if (spriteItemProvider == null) {
			spriteItemProvider = new SpriteItemProvider(this);
		}

		return spriteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Sound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoundItemProvider soundItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Sound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoundAdapter() {
		if (soundItemProvider == null) {
			soundItemProvider = new SoundItemProvider(this);
		}

		return soundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Tile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TileItemProvider tileItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Tile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTileAdapter() {
		if (tileItemProvider == null) {
			tileItemProvider = new TileItemProvider(this);
		}

		return tileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.ChangeScene} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeSceneItemProvider changeSceneItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.ChangeScene}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeSceneAdapter() {
		if (changeSceneItemProvider == null) {
			changeSceneItemProvider = new ChangeSceneItemProvider(this);
		}

		return changeSceneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Play} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayItemProvider playItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Play}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayAdapter() {
		if (playItemProvider == null) {
			playItemProvider = new PlayItemProvider(this);
		}

		return playItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Animate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnimateItemProvider animateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Animate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnimateAdapter() {
		if (animateItemProvider == null) {
			animateItemProvider = new AnimateItemProvider(this);
		}

		return animateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.ChangeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangePropertyItemProvider changePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.ChangeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangePropertyAdapter() {
		if (changePropertyItemProvider == null) {
			changePropertyItemProvider = new ChangePropertyItemProvider(this);
		}

		return changePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Destroy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DestroyItemProvider destroyItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Destroy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDestroyAdapter() {
		if (destroyItemProvider == null) {
			destroyItemProvider = new DestroyItemProvider(this);
		}

		return destroyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.HitBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HitBoxItemProvider hitBoxItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.HitBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHitBoxAdapter() {
		if (hitBoxItemProvider == null) {
			hitBoxItemProvider = new HitBoxItemProvider(this);
		}

		return hitBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.UI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UIItemProvider uiItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.UI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUIAdapter() {
		if (uiItemProvider == null) {
			uiItemProvider = new UIItemProvider(this);
		}

		return uiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Text} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextItemProvider textItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Text}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAdapter() {
		if (textItemProvider == null) {
			textItemProvider = new TextItemProvider(this);
		}

		return textItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.IFrame} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IFrameItemProvider iFrameItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.IFrame}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIFrameAdapter() {
		if (iFrameItemProvider == null) {
			iFrameItemProvider = new IFrameItemProvider(this);
		}

		return iFrameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.obeo.dsl.game.HTMLElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HTMLElementItemProvider htmlElementItemProvider;

	/**
	 * This creates an adapter for a {@link fr.obeo.dsl.game.HTMLElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHTMLElementAdapter() {
		if (htmlElementItemProvider == null) {
			htmlElementItemProvider = new HTMLElementItemProvider(this);
		}

		return htmlElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gameItemProvider != null) gameItemProvider.dispose();
		if (tmxItemProvider != null) tmxItemProvider.dispose();
		if (sheetItemProvider != null) sheetItemProvider.dispose();
		if (animationItemProvider != null) animationItemProvider.dispose();
		if (collisionItemProvider != null) collisionItemProvider.dispose();
		if (sensorItemProvider != null) sensorItemProvider.dispose();
		if (keyEventItemProvider != null) keyEventItemProvider.dispose();
		if (arrowKeyItemProvider != null) arrowKeyItemProvider.dispose();
		if (fireKeyItemProvider != null) fireKeyItemProvider.dispose();
		if (actionKeyItemProvider != null) actionKeyItemProvider.dispose();
		if (confirmKeyItemProvider != null) confirmKeyItemProvider.dispose();
		if (escapeKeyItemProvider != null) escapeKeyItemProvider.dispose();
		if (pauseKeyItemProvider != null) pauseKeyItemProvider.dispose();
		if (saveKeyItemProvider != null) saveKeyItemProvider.dispose();
		if (jumpItemProvider != null) jumpItemProvider.dispose();
		if (jumpedItemProvider != null) jumpedItemProvider.dispose();
		if (moveEventItemProvider != null) moveEventItemProvider.dispose();
		if (moveDownItemProvider != null) moveDownItemProvider.dispose();
		if (moveUpItemProvider != null) moveUpItemProvider.dispose();
		if (moveStopVerticalyItemProvider != null) moveStopVerticalyItemProvider.dispose();
		if (moveLeftItemProvider != null) moveLeftItemProvider.dispose();
		if (moveRightItemProvider != null) moveRightItemProvider.dispose();
		if (moveStopHorizontalyItemProvider != null) moveStopHorizontalyItemProvider.dispose();
		if (spriteItemProvider != null) spriteItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (soundItemProvider != null) soundItemProvider.dispose();
		if (tileItemProvider != null) tileItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (changeSceneItemProvider != null) changeSceneItemProvider.dispose();
		if (playItemProvider != null) playItemProvider.dispose();
		if (animateItemProvider != null) animateItemProvider.dispose();
		if (changePropertyItemProvider != null) changePropertyItemProvider.dispose();
		if (destroyItemProvider != null) destroyItemProvider.dispose();
		if (hitBoxItemProvider != null) hitBoxItemProvider.dispose();
		if (uiItemProvider != null) uiItemProvider.dispose();
		if (containerItemProvider != null) containerItemProvider.dispose();
		if (textItemProvider != null) textItemProvider.dispose();
		if (buttonItemProvider != null) buttonItemProvider.dispose();
		if (iFrameItemProvider != null) iFrameItemProvider.dispose();
		if (htmlElementItemProvider != null) htmlElementItemProvider.dispose();
	}

}
